import { Controller, Get, Param, Res, NotFoundException, UseGuards, Req, Post, InternalServerErrorException, BadRequestException, Body } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Document, DocumentType } from './entities/document.entity';
import { Response } from 'express';
import * as fs from 'fs';
import * as path from 'path';
import { JwtAuthGuard } from '@feature/security/guards/jwt-auth.guard';
import { MailService } from '../../common/services/mail.service';
import { Logger } from '@nestjs/common';
import { Event } from '../Event/entities/event.entity';
import { EventParticipation } from '../Event/entities/event-participation.entity';

@Controller('documents')
export class DocumentController {
  private readonly logger = new Logger(DocumentController.name);

  constructor(
    @InjectRepository(Document)
    private readonly documentRepository: Repository<Document>,
    @InjectRepository(Event)
    private readonly eventRepository: Repository<Event>,
    @InjectRepository(EventParticipation)
    private readonly participationRepository: Repository<EventParticipation>,
    private readonly mailService: MailService
  ) {}

  @Get(':id/download')
  async downloadDocument(@Param('id') id: string, @Res() res: Response) {
    try {
      this.logger.log(`Tentative de t√©l√©chargement du document ${id}`);
      
      const document = await this.documentRepository.findOne({ where: { id } });
      if (!document) {
        this.logger.error(`Document non trouv√©: ${id}`);
        throw new NotFoundException('Document non trouv√©');
      }

      const filePath = path.resolve(document.file_url);
      this.logger.log(`Chemin du fichier: ${filePath}`);

      if (!fs.existsSync(filePath)) {
        this.logger.error(`Fichier introuvable: ${filePath}`);
        throw new NotFoundException('Fichier de la facture introuvable');
      }

      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${path.basename(filePath)}"`);
      
      const fileStream = fs.createReadStream(filePath);
      fileStream.on('error', (error) => {
        this.logger.error(`Erreur lors de la lecture du fichier: ${error.message}`);
        throw new InternalServerErrorException('Erreur lors de la lecture du fichier');
      });

      fileStream.pipe(res);
      this.logger.log(`Document ${id} t√©l√©charg√© avec succ√®s`);
    } catch (error) {
      this.logger.error(`Erreur lors du t√©l√©chargement: ${error.message}`);
      throw error;
    }
  }

  @Get('last-invoice')
  @UseGuards(JwtAuthGuard)
  async getLastInvoice(@Req() req, @Res() res: Response) {
    try {
      const userId = req.user.userId;
      this.logger.log(`Recherche de la derni√®re facture pour l'utilisateur ${userId}`);

      const lastInvoice = await this.documentRepository.findOne({
        where: { uploader: { id: userId }, type: DocumentType.INVOICE },
        order: { id: 'DESC' }
      });

      if (!lastInvoice) {
        this.logger.error(`Aucune facture trouv√©e pour l'utilisateur ${userId}`);
        throw new NotFoundException('Aucune facture trouv√©e');
      }

      const filePath = path.resolve(lastInvoice.file_url);
      this.logger.log(`Chemin du fichier: ${filePath}`);

      if (!fs.existsSync(filePath)) {
        this.logger.error(`Fichier introuvable: ${filePath}`);
        throw new NotFoundException('Fichier de la facture introuvable');
      }

      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${path.basename(filePath)}"`);
      
      const fileStream = fs.createReadStream(filePath);
      fileStream.on('error', (error) => {
        this.logger.error(`Erreur lors de la lecture du fichier: ${error.message}`);
        throw new InternalServerErrorException('Erreur lors de la lecture du fichier');
      });

      fileStream.pipe(res);
      this.logger.log(`Derni√®re facture t√©l√©charg√©e avec succ√®s pour l'utilisateur ${userId}`);
    } catch (error) {
      this.logger.error(`Erreur lors du t√©l√©chargement de la derni√®re facture: ${error.message}`);
      throw error;
    }
  }

  /**
   * Endpoint temporaire pour cr√©er une facture de test
   * √Ä supprimer apr√®s les tests
   */
  @Post('create-test-invoice')
  @UseGuards(JwtAuthGuard)
  async createTestInvoice(@Req() req) {
    try {
      const user = req.user;
      this.logger.log(`Cr√©ation d'une facture de test pour l'utilisateur ${user.userId}`);

      // Cr√©er une facture de test
      const testInvoice = this.documentRepository.create({
        title: `Facture Test - ${new Date().toLocaleDateString()}`,
        description: 'Facture de test g√©n√©r√©e automatiquement',
        file_url: './uploads/invoices/invoice-07ce347e-9603-4bc3-be7e-39a395e34233.pdf', // Utiliser une facture existante
        type: DocumentType.INVOICE,
        uploader: { id: user.userId }
      });

      await this.documentRepository.save(testInvoice);

      this.logger.log(`Facture de test cr√©√©e avec succ√®s pour l'utilisateur ${user.userId}`);
      return { 
        message: 'Facture de test cr√©√©e avec succ√®s.',
        invoiceId: testInvoice.id
      };
    } catch (error) {
      this.logger.error(`Erreur lors de la cr√©ation de la facture de test: ${error.message}`);
      throw error;
    }
  }

  /**
   * Endpoint pour r√©clamer une facture :
   * - V√©rifie l'utilisateur connect√© (JWT)
   * - V√©rifie si l'utilisateur a particip√© √† l'√©v√©nement
   * - Cherche la facture pour cet √©v√©nement sp√©cifique
   * - Envoie la facture par email via Mailtrap
   * - Retourne un message de succ√®s
   */
  @Post('request-invoice')
  @UseGuards(JwtAuthGuard)
  async requestInvoice(@Req() req, @Body() body: { eventId: string, eventTitle?: string }) {
    try {
      const user = req.user;
      const { eventId } = body;
      
      this.logger.log(`üîç DEBUG: Demande de facture par l'utilisateur ${user.userId} pour l'√©v√©nement ${eventId}`);
      this.logger.log(`üîç DEBUG: Body re√ßu: ${JSON.stringify(body)}`);
      this.logger.log(`üîç DEBUG: User info: ${JSON.stringify({ userId: user.userId, email: user.email })}`);

      // V√©rifier si l'√©v√©nement existe
      const event = await this.eventRepository.findOne({
        where: { id: eventId }
      });

      this.logger.log(`üîç DEBUG: √âv√©nement trouv√©: ${event ? 'OUI' : 'NON'} - ${event?.title || 'N/A'}`);

      if (!event) {
        this.logger.error(`√âv√©nement ${eventId} non trouv√©`);
        throw new NotFoundException('√âv√©nement non trouv√©');
      }

      // V√©rifier si l'utilisateur a particip√© √† cet √©v√©nement
      const participation = await this.participationRepository.findOne({
        where: { 
          event: { id: eventId },
          participant: { id: user.userId }
        }
      });

      this.logger.log(`üîç DEBUG: Participation trouv√©e: ${participation ? 'OUI' : 'NON'}`);
      if (participation) {
        this.logger.log(`üîç DEBUG: Statut participation: ${participation.status} - Paiement: ${participation.payment_status}`);
      }

      if (!participation) {
        this.logger.error(`L'utilisateur ${user.userId} n'a pas particip√© √† l'√©v√©nement ${eventId}`);
        throw new BadRequestException('Vous n\'avez pas particip√© √† cet √©v√©nement.');
      }

      // Chercher la facture pour cet utilisateur (toutes les factures, pas seulement li√©es √† l'√©v√©nement)
      let invoice = await this.documentRepository.findOne({
        where: { 
          uploader: { id: user.userId }, 
          type: DocumentType.INVOICE
        },
        order: { id: 'DESC' }
      });

      // Si aucune facture n'est trouv√©e, cr√©er une facture sp√©cifique √† l'√©v√©nement
      if (!invoice || !invoice.file_url || !fs.existsSync(path.resolve(invoice.file_url))) {
        this.logger.log(`üîç DEBUG: Aucune facture trouv√©e pour l'utilisateur ${user.userId}, cr√©ation d'une facture sp√©cifique √† l'√©v√©nement`);
        
        // G√©n√©rer un nom de fichier unique pour cette facture
        const invoiceId = require('crypto').randomUUID();
        const fileName = `invoice-${invoiceId}.pdf`;
        const filePath = path.join('./uploads/invoices', fileName);
        
        // Cr√©er le dossier s'il n'existe pas
        const invoiceDir = path.dirname(filePath);
        if (!fs.existsSync(invoiceDir)) {
          fs.mkdirSync(invoiceDir, { recursive: true });
        }
        
        // G√©n√©rer une facture PDF simple
        await this.generateSimpleInvoicePDF(event, user, participation, filePath);
        
        // Cr√©er l'entr√©e dans la base de donn√©es
        const newInvoice = this.documentRepository.create({
          title: `Facture - ${event.title}`,
          description: `Facture pour l'√©v√©nement ${event.title}`,
          file_url: filePath,
          type: DocumentType.INVOICE,
          uploader: { id: user.userId },
          event: { id: eventId }
        });

        await this.documentRepository.save(newInvoice);
        
        // Utiliser la facture cr√©√©e
        invoice = await this.documentRepository.findOne({
          where: { id: newInvoice.id }
        });

        this.logger.log(`üîç DEBUG: Facture cr√©√©e avec succ√®s: ${invoice?.id} - ${filePath}`);

        if (!invoice || !fs.existsSync(path.resolve(invoice.file_url))) {
          this.logger.error(`Impossible de cr√©er ou trouver une facture pour l'utilisateur ${user.userId}`);
          throw new NotFoundException('Aucune facture trouv√©e. Veuillez contacter l\'administrateur.');
        }
      }

      // Envoyer la facture par email
      try {
        await this.mailService.sendMail(
          user.email,
          `Facture - ${event.title}`,
          `Bonjour,\n\nVeuillez trouver votre facture pour l'√©v√©nement "${event.title}" en pi√®ce jointe.\n\nCordialement,\nL'√©quipe Kiwi Club`,
          undefined,
          [{ filename: `facture_${event.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`, path: invoice.file_url }]
        );
        this.logger.log(`‚úÖ Facture envoy√©e par email √† ${user.email}`);
      } catch (emailError) {
        this.logger.error(`‚ùå Erreur envoi email: ${emailError.message}`);
        // Ne pas faire √©chouer la requ√™te si l'email √©choue
      }

      this.logger.log(`Facture envoy√©e par email √† ${user.email} pour l'√©v√©nement ${eventId}`);
      return { 
        message: 'Facture envoy√©e par email.',
        eventTitle: event.title,
        invoiceId: invoice.id
      };
    } catch (error) {
      this.logger.error(`Erreur lors de l'envoi de la facture: ${error.message}`);
      throw error;
    }
  }

  /**
   * G√©n√®re une facture PDF compl√®te et professionnelle
   */
  private async generateSimpleInvoicePDF(event: any, user: any, participation: any, filePath: string): Promise<void> {
    try {
      const PDFDocument = require('pdfkit');
      const doc = new PDFDocument({ margin: 50 });
      const writeStream = fs.createWriteStream(filePath);
      doc.pipe(writeStream);

      // Couleurs
      const primaryColor = '#2E7D32'; // Vert Kiwi Club
      const secondaryColor = '#666666';
      const lightGray = '#F5F5F5';

      // En-t√™te avec logo et informations
      doc.rect(0, 0, 595, 100).fill(lightGray);
      doc.fillColor(primaryColor);
      doc.fontSize(24).text('KIWI CLUB', 50, 20, { align: 'left' });
      doc.fillColor(secondaryColor);
      doc.fontSize(12).text('R√©seau de Networking Professionnel', 50, 45);
      doc.fontSize(10).text('www.kiwiclub.be', 50, 60);
      
      // Num√©ro de facture et date
      doc.fillColor('black');
      doc.fontSize(16).text('FACTURE', 400, 20, { align: 'right' });
      doc.fontSize(10).text(`N¬∞ ${participation.id || 'INV-' + Date.now()}`, 400, 40, { align: 'right' });
      doc.text(`Date: ${new Date().toLocaleDateString('fr-FR')}`, 400, 55, { align: 'right' });

      // Ligne de s√©paration
      doc.moveTo(50, 100).lineTo(545, 100).stroke(primaryColor, 2);

      // Informations du client
      doc.moveDown(2);
      doc.fillColor(primaryColor);
      doc.fontSize(14).text('FACTUR√â √Ä:', 50, 120);
      doc.fillColor('black');
      doc.fontSize(12).text(`${user.prenom || ''} ${user.nom || ''}`, 50, 140);
      doc.text(`${user.email || 'N/A'}`, 50, 155);
      if (user.telephone) {
        doc.text(`T√©l: ${user.telephone}`, 50, 170);
      }
      if (user.entreprise) {
        doc.text(`Entreprise: ${user.entreprise}`, 50, 185);
      }

      // D√©tails de l'√©v√©nement
      doc.moveDown(2);
      doc.fillColor(primaryColor);
      doc.fontSize(14).text('D√âTAILS DE L\'√âV√âNEMENT:', 50, 220);
      doc.fillColor('black');
      doc.fontSize(12).text(`${event.title || 'N/A'}`, 50, 240);
      doc.text(`Date: ${event.date ? new Date(event.date).toLocaleDateString('fr-FR') : 'N/A'}`, 50, 255);
      doc.text(`Heure: ${event.startTime || 'N/A'} - ${event.endTime || 'N/A'}`, 50, 270);
      doc.text(`Lieu: ${event.location || 'N/A'}`, 50, 285);
      if (event.description) {
        doc.text(`Description: ${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}`, 50, 300);
      }

      // Tableau des services
      doc.moveDown(2);
      const tableTop = 350;
      const itemHeight = 30;
      const col1 = 50;
      const col2 = 300;
      const col3 = 400;
      const col4 = 500;

      // En-t√™te du tableau
      doc.rect(col1, tableTop, 495, itemHeight).fill(primaryColor);
      doc.fillColor('white');
      doc.fontSize(10).text('DESCRIPTION', col1 + 10, tableTop + 10);
      doc.text('QUANTIT√â', col2 + 10, tableTop + 10);
      doc.text('PRIX UNIT.', col3 + 10, tableTop + 10);
      doc.text('TOTAL', col4 + 10, tableTop + 10);

      // Ligne de service
      doc.fillColor('black');
      doc.rect(col1, tableTop + itemHeight, 495, itemHeight).stroke();
      doc.fontSize(10).text(`Participation √† l'√©v√©nement "${event.title}"`, col1 + 10, tableTop + itemHeight + 10);
      doc.text('1', col2 + 20, tableTop + itemHeight + 10);
      doc.text(`${event.price || 0}‚Ç¨`, col3 + 10, tableTop + itemHeight + 10);
      doc.text(`${event.price || 0}‚Ç¨`, col4 + 10, tableTop + itemHeight + 10);

      // Sous-total et TVA
      const subtotalY = tableTop + (itemHeight * 2) + 20;
      doc.fontSize(12).text(`Sous-total: ${event.price || 0}‚Ç¨`, col3, subtotalY);
      doc.text(`TVA (21%): ${((event.price || 0) * 0.21).toFixed(2)}‚Ç¨`, col3, subtotalY + 20);
      
      // Total
      const totalY = subtotalY + 50;
      doc.rect(col3, totalY - 10, 145, 30).fill(lightGray);
      doc.fillColor(primaryColor);
      doc.fontSize(14).text(`TOTAL: ${((event.price || 0) * 1.21).toFixed(2)}‚Ç¨`, col3 + 10, totalY);

      // Informations de paiement
      doc.fillColor('black');
      doc.moveDown(3);
      doc.fontSize(12).text('INFORMATIONS DE PAIEMENT:', 50, totalY + 50);
      doc.fontSize(10).text(`Statut: ${participation.paymentStatus || 'PAID'}`, 50, totalY + 70);
      doc.text(`Date de paiement: ${participation.paymentDate ? new Date(participation.paymentDate).toLocaleDateString('fr-FR') : new Date().toLocaleDateString('fr-FR')}`, 50, totalY + 85);
      doc.text(`M√©thode: Stripe`, 50, totalY + 100);

      // Conditions et notes
      doc.moveDown(2);
      doc.fontSize(10).text('CONDITIONS:', 50, totalY + 150);
      doc.text('‚Ä¢ Paiement effectu√© via Stripe', 50, totalY + 170);
      doc.text('‚Ä¢ Aucun remboursement apr√®s le d√©but de l\'√©v√©nement', 50, totalY + 185);
      doc.text('‚Ä¢ En cas d\'annulation, contactez-nous 48h avant l\'√©v√©nement', 50, totalY + 200);

      // Pied de page
      const footerY = 750;
      doc.rect(0, footerY, 595, 50).fill(lightGray);
      doc.fillColor(secondaryColor);
      doc.fontSize(8).text('Merci de votre confiance et √† bient√¥t chez Kiwi Club!', 50, footerY + 15, { align: 'center' });
      doc.text('Pour toute question: contact@kiwiclub.be', 50, footerY + 30, { align: 'center' });

      doc.end();

      return new Promise((resolve, reject) => {
        writeStream.on('finish', resolve);
        writeStream.on('error', reject);
      });
    } catch (error) {
      this.logger.error(`Erreur lors de la g√©n√©ration de la facture PDF: ${error.message}`);
      throw error;
    }
  }
} 